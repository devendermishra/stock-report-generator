# Stock Report Generator Dockerfile with GPU Support
FROM nvidia/cuda:11.8-devel-ubuntu22.04

# Set working directory
WORKDIR /app

# Set environment variables for GPU support
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility
ENV CUDA_VISIBLE_DEVICES=0
ENV TF_FORCE_GPU_ALLOW_GROWTH=true

# Install system dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    python3-dev \
    gcc \
    g++ \
    git \
    wget \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create symbolic link for python
RUN ln -s /usr/bin/python3 /usr/bin/python

# Upgrade pip
RUN pip install --upgrade pip

# Copy requirements files
COPY requirements-gpu.txt ./

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements-gpu.txt

# Copy application code
COPY src/ ./src/
COPY data/ ./data/
COPY reports/ ./reports/
COPY temp/ ./temp/
COPY logs/ ./logs/

# Create necessary directories
RUN mkdir -p reports temp logs data/inputs data/outputs data/processed data/raw

# Set Python path
ENV PYTHONPATH=/app/src

# Expose port (if needed for web interface)
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import torch; exit(0 if torch.cuda.is_available() else 1)"

# Default command
CMD ["python", "src/main.py", "--help"]

# Usage examples:
# Build: docker build -f Dockerfile.gpu -t stock-report-generator:gpu .
# Run: docker run --gpus all -it stock-report-generator:gpu
# Run with specific GPU: docker run --gpus '"device=0"' -it stock-report-generator:gpu
# Run with volume mount: docker run --gpus all -v $(pwd)/reports:/app/reports -it stock-report-generator:gpu
